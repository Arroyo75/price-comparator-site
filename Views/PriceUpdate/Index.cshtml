@using price_comparator_site.ViewModels;

@model IEnumerable<GamePriceViewModel>

@Html.AntiForgeryToken()

<div class="container py-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <h1>Price Updates</h1>
            <p class="text-muted">
                Showing @Model.Count() games with store prices
            </p>
        </div>
        <div class="mb-3">
            <button id="updateAllPrices" class="btn btn-primary">
                Update All Prices
            </button>
        </div>
    </div>

    <div id="statusMessages">
        @if (TempData["Success"] != null)
        {
            <div class="alert alert-success alert-dismissible fade show" role="alert">
                @TempData["Success"]
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            </div>
        }
        @if (TempData["Error"] != null)
        {
            <div class="alert alert-danger alert-dismissible fade show" role="alert">
                @TempData["Error"]
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            </div>
        }
    </div>

    <div class="card">
        <div class="card-body">
            <div class="table-responsive">
                <table class="table table-hover">
                    <thead>
                        <tr>
                            <th>Game</th>
                            <th>Current Price</th>
                            <th>Last Updated</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var game in Model)
                        {
                            <tr id="game-row-@game.Id">
                                <td>@game.Name</td>
                                <td id="price-@game.Id">
                                    @(game.CurrentPrice.ToString("C"))
                                </td>
                                <td id="updated-@game.Id">
                                    <span class="@(DateTime.Now.Subtract(game.LastUpdated).Days > 7 ? "text-danger" : "")">
                                        @game.LastUpdatedFormatted
                                    </span>
                                </td>
                                <td>
                                    <button class="btn btn-sm btn-outline-primary update-price"
                                            data-game-id="@game.Id"
                                            onclick="updatePrice(@game.Id)">
                                        Update Price
                                    </button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        async function updatePrice(gameId) {
            const button = document.querySelector(`[data-game-id="${gameId}"]`);
            const originalText = button.innerHTML;

            try {
                button.disabled = true;
                button.innerHTML = '<span class="spinner-border spinner-border-sm"></span> Updating...';

                const tokenElement = document.querySelector('input[name="__RequestVerificationToken"]');
                if (!tokenElement) {
                    throw new Error('Anti-forgery token not found');
                }

                const response = await fetch(`/PriceUpdate/UpdatePrice/${gameId}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': tokenElement.value
                    }
                });

                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }

                const data = await response.json();

                if (data.success) {
                    const priceElement = document.getElementById(`price-${gameId}`);
                    if (priceElement) {
                        priceElement.textContent = new Intl.NumberFormat('pl-PL', {
                            style: 'currency',
                            currency: 'PLN'
                        }).format(data.newPrice);
                    }

                    const updatedElement = document.getElementById(`updated-${gameId}`);
                    if (updatedElement) {
                        updatedElement.textContent = 'Just now';
                    }

                    showAlert('success', 'Price updated successfully!');
                } else {
                    showAlert('danger', data.message || 'Failed to update price');
                }
            } catch (error) {
                console.error('Error:', error);
                showAlert('danger', 'Error updating price');
            } finally {
                button.disabled = false;
                button.innerHTML = originalText;
            }
        }

        function showAlert(type, message) {
            const alertsContainer = document.getElementById('statusMessages');
            if (!alertsContainer) return;

            const alert = document.createElement('div');
            alert.className = `alert alert-${type} alert-dismissible fade show`;
            alert.innerHTML = `
                ${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            `;

            alertsContainer.appendChild(alert);

            setTimeout(() => {
                if (alert && alert.parentNode) {
                    alert.remove();
                }
            }, 5000);
        }

        async function updateAllPrices() {
            const button = document.getElementById('updateAllPrices');
            const originalText = button.innerHTML;

            try {
                button.disabled = true;
                button.innerHTML = '<span class="spinner-border spinner-border-sm"></span> Updating All Prices...';

                const response = await fetch('/PriceUpdate/UpdateAllPrices', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    }
                });

                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }

                const data = await response.json();

                if (data.success) {
                    // Update each game's price in the table
                    data.updates.forEach(update => {
                        if (update.success) {
                            const priceElement = document.getElementById(`price-${update.gameId}`);
                            const updatedElement = document.getElementById(`updated-${update.gameId}`);

                            if (priceElement) {
                                priceElement.textContent = new Intl.NumberFormat('pl-PL', {
                                    style: 'currency',
                                    currency: 'PLN'
                                }).format(update.newPrice);
                            }

                            if (updatedElement) {
                                updatedElement.textContent = 'Just now';
                            }
                        }
                    });

                    showAlert('success', data.message);
                } else {
                    showAlert('danger', data.message || 'Failed to update prices');
                }
            } catch (error) {
                console.error('Error:', error);
                showAlert('danger', 'Error updating prices');
            } finally {
                button.disabled = false;
                button.innerHTML = originalText;
            }
        }

        document.getElementById('updateAllPrices').addEventListener('click', updateAllPrices);

    </script>
}